(function(){var c={}.hasOwnProperty,b=function(d,g){for(var f in g){if(c.call(g,f)){d[f]=g[f]}}function e(){this.constructor=d}e.prototype=g.prototype;d.prototype=new e();d.__super__=g.prototype;return d},a=function(d,e){return function(){return d.apply(e,arguments)}};describe("Ivento.Dci.Context",function(){var d,f,e;d=(function(g){b(h,g);function h(i){if(i==null){i=[]}this.bind(i).to(this.ledgers)}h.prototype.ledgers={_contract:["push","reduce"],addEntry:function(j,i){return this.push({message:j,amount:i})},getBalance:function(){return this.reduce((function(j,i){return j+i.amount}),0)}};h.prototype.balance=function(){return this.ledgers.getBalance()};h.prototype.increaseBalance=function(i){return this.ledgers.addEntry("Depositing",i)};h.prototype.decreaseBalance=function(i){return this.ledgers.addEntry("Withdrawing",-i)};return h})(Ivento.Dci.Context);f=(function(){function g(h){Ivento.Dci.Context.bind(this,{entries:h}).to(this.ledgers)}g.prototype.ledgers={_contract:["entries"],getBalance:function(){return this.entries.reduce((function(i,h){return i+h.amount}),0)}};g.prototype.balance=function(){return this.ledgers.getBalance()};return g})();e=null;beforeEach(function(){e=[{message:"Start",amount:100},{message:"First deposit",amount:1000}];return window.entries=e});describe("Binding behaviour",function(){var g;g=null;beforeEach(function(){return g=new d(e)});it("should bind objects to roles using the bind() method",function(){return expect(g.ledgers).toBeDefined()});it("should be able to use the context methods",function(){return expect(g.balance()).toEqual(1100)});it("should modify the rolePlayers correctly",function(){expect(e.length).toBe(2);g.increaseBalance(200);expect(e.length).toBe(3);expect(e[2]).toEqual({message:"Depositing",amount:200});expect(g.balance()).toEqual(1300);g.decreaseBalance(1500);expect(g.balance()).toEqual(-200);return expect(e[3]).toEqual({message:"Withdrawing",amount:-1500})});return it("should bind to objects not using inheritance with the static method.",function(){var h;h=new f(e);return expect(h.balance()).toEqual(1100)})});describe("MoneyTransfer Context",function(){var g;g=(function(h){b(i,h);function i(l,k,j){this.bind(l).to(this.source);this.bind(k).to(this.destination);this.bind(j).to(this.amount)}i.prototype.source={_contract:["decreaseBalance"],withdraw:function(j){return this.decreaseBalance(j)},transfer:function(j){this.context.destination.deposit(j);return this.withdraw(j)}};i.prototype.destination={_contract:["increaseBalance"],deposit:function(j){return this.increaseBalance(j)}};i.prototype.amount={};i.prototype.transfer=function(){return this.source.transfer(this.amount)};return i})(Ivento.Dci.Context);return it("should transfer money using Accounts",function(){var h,i,j;j=new d(e);i=new d;expect(j.balance()).toEqual(1100);expect(i.balance()).toEqual(0);h=new g(j,i,200);h.transfer();expect(j.balance()).toEqual(900);return expect(i.balance()).toEqual(200)})});describe("Role Contracts",function(){var g;g=(function(h){b(i,h);function i(j,k){this.bind(j).to(this.guests);this.bind(k).to(this.waiter)}i.prototype.waiter={_contract:["name"],greetGuests:function(){return"Welcome, my name is "+this.name+", I'll be your waiter tonight."}};i.prototype.guests={_contract:["add","remove"]};i.prototype.greet=function(){return this.waiter.greetGuests()};i.prototype.addGuest=function(j){return this.guests.add(j)};return i})(Ivento.Dci.Context);it("should ensure that the RolePlayer has all contract properties in the _contract array",function(){var h,i,j;j={name:"Henry"};i=[];i.add=i.push;i.remove=function(k){return delete this[k]};h=new g(i,j);expect(h.greet()).toEqual("Welcome, my name is Henry, I'll be your waiter tonight.");return expect(h.addGuest("Someone")).toEqual(1)});return it("should throw an Exception if the RolePlayer doesn't have all the properties in the _contract array",function(){var h,i;h={};i=[];i.add=i.push;i.remove=function(j){return delete this[j]};return expect(function(){return new g(i,h)}).toThrow("RolePlayer [object Object] didn't fulfill Role Contract with property 'name'.")})});describe("Role method accessing behavior for name conflicts",function(){var g,h,i;i=(function(j){b(k,j);function k(l){this.bind(l).to(this.account)}k.prototype.account={_contract:["save","write"],transfer:function(){this.save();return this.write()},write:function(){return this.logWritten=true}};k.prototype.transfer=function(){return this.account.transfer()};return k})(Ivento.Dci.Context);g=(function(){function j(k){this.amount=k;this.write=a(this.write,this);this.validate=a(this.validate,this);this.save=a(this.save,this)}j.prototype.save=function(){if(this.validate()){return this.write()}};j.prototype.validate=function(){return this.amount>0};j.prototype.write=function(){return this.dbWritten=true};return j})();h=(function(j){b(k,j);function k(l){this.bind(l).to(this.player);this.bind(l).to(this.judge)}k.prototype.player={_contract:["bar"],foo:function(){return"Role method foo"}};k.prototype.judge={_contract:["foo"],judgeGame:function(){return"Judge: "+this.foo()}};k.prototype.play=function(){return this.player.bar()};k.prototype.playFoo=function(){return this.player.foo()};k.prototype.judgeGame=function(){return this.judge.judgeGame()};return k})(Ivento.Dci.Context);it("should call the instance method of object.foo even if the object has a role.foo method defined, if called outside the context",function(){var j,k;k={foo:function(){return"Object method foo"},bar:function(){return this.foo()}};j=new h(k);expect(j.play()).toEqual("Object method foo");expect(j.playFoo()).toEqual("Role method foo");expect(j.judgeGame()).toEqual("Judge: Object method foo");expect(k.foo()).toEqual("Object method foo");return expect(k.bar()).toEqual("Object method foo")});it("should call the role method role.foo even if the object has a object.foo defined, if called inside the context",function(){var j,k;j=new g(123);k=new i(j);expect(j.logWritten).toBeFalsy();expect(j.dbWritten).toBeFalsy();k.transfer();expect(j.logWritten).toBeTruthy();return expect(j.dbWritten).toBeTruthy()});return it("should throw an exception if multiple roles have the same role method name",function(){var j;j=(function(k){b(l,k);function l(m){if(m==null){m={}}this.bind(m).to(this.source);this.bind(m).to(this.target)}l.prototype.source={foo:function(){return"source"}};l.prototype.target={foo:function(){return"target"}};l.prototype.doIt=function(){return this.source.foo()+this.target.foo()};return l})(Ivento.Dci.Context);return expect(function(){return new j()}).toThrow("Method name conflict in Roles 'source.foo' and 'target.foo'. Please prepend the Role names to the methods to avoid conflict.")})});describe("Context access from Role methods",function(){var g,h;g=(function(i){b(j,i);function j(k){this.bind(k).to(this.R1);this.bind("C1").to(this.name)}j.prototype.R1={name:function(){return this+":"+this.context.name}};j.prototype.name={};j.prototype.getName=function(){var k,l;k=new h(this.R1);l=this.R1.name()+"/";l+=k.getName();return l+="/"+this.R1.name()};return j})(Ivento.Dci.Context);h=(function(i){b(j,i);function j(k){this.bind(k).to(this.R2);this.bind("C2").to(this.name)}j.prototype.R2={name:function(){return this+":"+this.context.name}};j.prototype.name={};j.prototype.getName=function(){return this.R2.name()};return j})(Ivento.Dci.Context);return it("should access the correct context and objects should keep identity",function(){var i;i={toString:function(){return"A"}};return expect(new g(i).getName()).toEqual("A:C1/A:C2/A:C1")})});return describe("Unbinding behavior",function(){var h,j,g,i;g=null;i=null;beforeEach(function(){return g={name:"Clark Kent",useXRay:function(){return"Prevented by glasses."}}});h=(function(k){b(l,k);function l(m){}l.prototype.spiderman={useWeb:function(){return"fzzzt!"}};return l})(Ivento.Dci.Context);j=(function(k){b(l,k);function l(m){this.bind(m).to(this.superman)}l.prototype.superman={useXRay:function(){return"wzzzt!"},fly:function(){expect(this).toBe(g);return"wheee!"}};l.prototype.execute=function(){expect(this).toBe(i);return this.superman.fly()};l.prototype.xRay=function(){return this.superman.useXRay()};return l})(Ivento.Dci.Context);return it("should remove the role methods from the rolePlayer when calling unbind",function(){i=new j(g);expect(g.useXRay()).toEqual("Prevented by glasses.");expect(g.fly).toBeUndefined();expect(i.superman.name).toBeUndefined();expect(i.xRay()).toEqual("wzzzt!");i.unbind();return expect(g.fly).toBeUndefined()})})})}).call(this);