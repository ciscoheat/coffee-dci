(function(){var b={}.hasOwnProperty,a=function(c,f){for(var e in f){if(b.call(f,e)){c[e]=f[e]}}function d(){this.constructor=c}d.prototype=f.prototype;c.prototype=new d();c.__super__=f.prototype;return c};describe("Ivento.Dci.Examples.Dijkstra",function(){var c,d,e;e=(function(f){a(g,f);function g(i,h){this.bind(i).to(this.node);this.bind(h).to(this.graph);h.distances.put(i,0)}g.prototype.graph={_contract:["nodes","distances","previous"],distanceBetween:function(h,i){return this.nodes.get(h).get(i)},removeNode:function(){return this.nodes.remove(this.context.node)},updateDistance:function(i,h){return this.distances.put(i,h)}};g.prototype.node={neighbors:function(){return this.context.graph.nodes.get(this)},distance:function(){return this.context.graph.distances.get(this)},isPreviousOf:function(h){return this.context.graph.previous.put(h,this)},distanceTo:function(h){return this.context.graph.distanceBetween(this,h)},neighborWithShortestPath:function(){var k,l,m,n,h,i,j;k=Infinity;n=null;j=this.context.graph.nodes.keys();for(h=0,i=j.length;h<i;h++){m=j[h];l=this.context.graph.distances.get(m);if(l<k){n=m;k=l}}return n}};g.prototype.findShortestPath=function(){var k,l,m,n,h,i,j;m=this.node.neighbors();if(m.isEmpty()){return this.graph.previous}j=m.keys();for(h=0,i=j.length;h<i;h++){l=j[h];k=this.node.distance()+this.node.distanceTo(l);if(k<this.graph.distances.get(l)){this.graph.updateDistance(l,k);this.node.isPreviousOf(l)}}this.graph.removeNode();n=this.node.neighborWithShortestPath();new g(n,this.graph).findShortestPath();return this.graph.previous};return g})(Ivento.Dci.Context);d=(function(){function f(g){this.toString=function(){return g}}return f})();c=(function(){f.prototype.distances=new Hashtable();f.prototype.previous=new Hashtable();f.prototype.nodes=new Hashtable();function f(l){var i,j,k,m,g,h;for(g=0,h=l.length;g<h;g++){k=l[g];j=k[0];m=k[1];i=k[2];if(!this.nodes.containsKey(j)){this.nodes.put(j,new Hashtable())}if(!this.distances.containsKey(j)){this.distances.put(j,Infinity)}if(!this.nodes.containsKey(m)){this.nodes.put(m,new Hashtable())}if(!this.distances.containsKey(m)){this.distances.put(m,Infinity)}this.nodes.get(j).put(m,i)}}return f})();return describe("Using Dijkstras algorithm",function(){return it("should find the shortest path from a to i",function(){var j,k,l,m,n,o,p,q,r,s,t,u,v;j=new d("a");k=new d("b");l=new d("c");m=new d("d");n=new d("e");o=new d("f");p=new d("g");r=new d("h");s=new d("i");v=[[j,k,2],[j,m,1],[k,l,3],[k,n,2],[l,o,1],[m,n,1],[m,p,2],[n,o,1],[o,s,4],[p,r,1],[r,s,2]];q=new c(v);u=new e(j,q).findShortestPath();t=[s];while(t[0]!==j){t.unshift(u.get(t[0]))}return expect(t.join(" -> ")).toEqual("a -> d -> g -> h -> i")})})})}).call(this);