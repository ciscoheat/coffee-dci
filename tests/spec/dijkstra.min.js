(function(){var b={}.hasOwnProperty,a=function(c,f){for(var e in f){if(b.call(f,e)){c[e]=f[e]}}function d(){this.constructor=c}d.prototype=f.prototype;c.prototype=new d();c.__super__=f.prototype;return c};describe("Ivento.Dci.Examples.Dijkstra",function(){var c;c=(function(d){a(e,d);e.prototype._tentativeDistances=new Hashtable();e.prototype._distances=new Hashtable();e.prototype._unvisited=new Hashtable();e.prototype._pathTo=new Hashtable();e.prototype._initialNode=null;function e(l,j){var h,i,k,f,g;h=function(m){return{node:m!=null?m[0]:null,distance:m!=null?m[1]:null}};for(f=0,g=l.length;f<g;f++){k=l[f];i=k[0];this._distances.put(i,{east:h(k[1]),south:h(k[2])});this._tentativeDistances.put(i,i===j?0:Infinity);if(i!==j){this._unvisited.put(i,true)}}this._initialNode=j;this._rebindNode(this._initialNode)}e.prototype.rebind=function(i,k,j,f,h){var g;this.bind(k).to("unvisitedSet");this.bind(j).to("tentativeDistances");this.bind(f).to("bestPath");this.bind(i).to("currentNode");this.bind(i).to("currentIntersection");g=h.get(i);this.bind(g).to("edge");this.bind(g.east.node).to("eastNeighbor");return this.bind(g.south.node).to("southNeighbor")};e.prototype._rebindNode=function(f){return this.rebind(f,this._unvisited,this._tentativeDistances,this._pathTo,this._distances)};e.prototype.tentativeDistances={_contract:["get","put"],distanceTo:function(f){return this.get(f)},set:function(g,f){return this.put(g,f)}};e.prototype.bestPath={_contract:["get","put"],fromStartTo:function(f){var g;g=[f];while(g[0]!==this.context._initialNode){g.unshift(this.get(g[0]))}return g}};e.prototype.currentIntersection={unvisitedNeighbors:function(){var f;f=[];if(this.context.eastNeighbor!=null){f.push(this.context.eastNeighbor)}if(this.context.southNeighbor!=null){f.push(this.context.southNeighbor)}return f}};e.prototype.edge={_contract:["east.distance","south.distance"]};e.prototype.currentNode={tentativeDistance:function(){return this.context.tentativeDistances.get(this)},edgeDistanceTo:function(f){if(f===this.context.eastNeighbor){return this.context.eastNeighbor.eastNeighborDistance()}if(f===this.context.southNeighbor){return this.context.southNeighbor.southNeighborDistance()}},isBestPathTo:function(f){return this.context.bestPath.put(f,this)}};e.prototype.eastNeighbor={eastNeighborDistance:function(){return this.context.edge.east.distance}};e.prototype.southNeighbor={southNeighborDistance:function(){return this.context.edge.south.distance}};e.prototype.unvisitedSet={_contract:["remove","containsKey"],smallestTentativeDistanceNode:function(){var g,h,f=this;h=Infinity;g=null;this.context.tentativeDistances.each(function(j,i){if(!f.containsKey(j)){return}if(g===null||i<h){h=i;return g=j}});return g}};e.prototype.to=function(i){var j,k,l,f,g,h;h=this.currentIntersection.unvisitedNeighbors();for(f=0,g=h.length;f<g;f++){k=h[f];j=this.currentNode.tentativeDistance()+this.currentNode.edgeDistanceTo(k);if(j<this.tentativeDistances.distanceTo(k)){this.tentativeDistances.set(k,j);this.currentNode.isBestPathTo(k)}}this.unvisitedSet.remove(this.currentNode);if(this.currentNode===i){return this.bestPath.fromStartTo(i)}l=this.unvisitedSet.smallestTentativeDistanceNode();this._rebindNode(l);return this.to(i)};return e})(Ivento.Dci.Context);return describe("Using Dijkstras algorithm",function(){return it("should find the shortest path from a to i",function(){var j,k,l,m,n,o,p,q,r,s,t;j=new String("a");k=new String("b");l=new String("c");m=new String("d");n=new String("e");o=new String("f");p=new String("g");q=new String("h");r=new String("i");s=[[j,[k,2],[m,1]],[k,[l,3],[n,2]],[l,null,[o,1]],[m,[n,1],[p,2]],[n,[o,1],null],[o,null,[r,4]],[p,[q,1],null],[q,[r,2],null],[r,null,null]];t=new c(s,j).to(r);return expect(t.join(" -> ")).toEqual("a -> d -> g -> h -> i")})})})}).call(this);