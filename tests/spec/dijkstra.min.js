(function(){var b={}.hasOwnProperty,a=function(c,f){for(var e in f){if(b.call(f,e)){c[e]=f[e]}}function d(){this.constructor=c}d.prototype=f.prototype;c.prototype=new d();c.__super__=f.prototype;return c};describe("Ivento.Dci.Examples.Dijkstra",function(){var c;c=(function(d){a(e,d);e.prototype._tentativeDistances=new Hashtable();e.prototype._distances=new Hashtable();e.prototype._unvisited=new Hashtable();e.prototype._smallestDistance=new Hashtable();function e(l,j){var h,i,k,m,f,g;for(f=0,g=l.length;f<g;f++){k=l[f];i=k[0];m=k[1];h=k[2];if(!this._tentativeDistances.containsKey(i)){this._tentativeDistances.put(i,Infinity)}if(!this._tentativeDistances.containsKey(m)){this._tentativeDistances.put(m,Infinity)}if(!this._distances.containsKey(i)){this._distances.put(i,new Hashtable())}this._distances.get(i).put(m,h)}this._tentativeDistances.put(j,0);this._unvisited=this._tentativeDistances.clone();this._unvisited.remove(j);this._bindRoles(j,this._unvisited,this._tentativeDistances)}e.prototype._bindRoles=function(f,h,g){this.bind(f).to(this.currentNode);this.bind(h).to(this.unvisitedSet);return this.bind(g).to(this.tentativeDistances)};e.prototype.tentativeDistances={_contract:["get","put"],distance:function(f){return this.get(f)},setDistance:function(g,f){return this.put(g,f)}};e.prototype.currentNode={unvisitedNeighbors:function(){var f;f=this.context._distances.get(this);if(f!=null){return f.keys()}else{return[]}},tentativeDistance:function(){return this.context.tentativeDistances.get(this)},edgeDistance:function(f){return this.context._distances.get(this).get(f)},hasSmallestEdgeDistanceTo:function(f){return this.context._smallestDistance.put(f,this)}};e.prototype.unvisitedSet={_contract:["remove"],smallestTentativeDistanceNode:function(){var g,h,f=this;h=Infinity;g=null;this.context.tentativeDistances.each(function(k,j){var i;if(!f.containsKey(k)){return}if(g===null||j<h){i=j;return g=k}});return g}};e.prototype.to=function(i){var j,k,l,f,g,h;h=this.currentNode.unvisitedNeighbors();for(f=0,g=h.length;f<g;f++){k=h[f];j=this.currentNode.tentativeDistance()+this.currentNode.edgeDistance(k);if(j<this.tentativeDistances.distance(k)){this.tentativeDistances.setDistance(k,j);this.currentNode.hasSmallestEdgeDistanceTo(k)}}this.unvisitedSet.remove(this.currentNode);l=this.unvisitedSet.smallestTentativeDistanceNode();if(l===i){return this._smallestDistance}this._bindRoles(l,this.unvisitedSet,this.tentativeDistances);return this.to(i)};return e})(Ivento.Dci.Context);return describe("Using Dijkstras algorithm",function(){return it("should find the shortest path from a to i",function(){var j,k,l,m,n,o,p,q,r,s,t,u,v,w;j=new String("a");k=new String("b");l=new String("c");m=new String("d");n=new String("e");o=new String("f");q=new String("g");r=new String("h");s=new String("i");t=[[j,k,2],[j,m,1],[k,l,3],[k,n,2],[l,o,1],[m,n,1],[m,q,2],[n,o,1],[o,s,4],[q,r,1],[r,s,2]];p=j;w=s;v=new c(t,p).to(w);u=[w];while(u[0]!==p){u.unshift(v.get(u[0]))}return expect(u.join(" -> ")).toEqual("a -> d -> g -> h -> i")})})})}).call(this);